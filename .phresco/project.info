{"pilotid":0,"name":"nodejs-webservice-hw","code":"PHR_nodejs-webservice-hw","version":"1.0.0","description":" nodejs webservice hw","technology":{"id":"tech-nodejs-webservice","name":"Node JS Web Service","modules":[{"id":"mod_connect_1.7.2","name":"connect","core":true,"required":true,"docs":[{"content":"Connect is a middleware framework for node, shipping with over 18 bundled middleware and a rich selection of 3rd-party middleware.\n\n","type":"HELP_TEXT"},{"content":"Connect is a middleware framework for node, shipping with over 18 bundled middleware and a rich selection of 3rd-party middleware\n\nMiddleware:\n\n1)Logger request logger with custom format support\n2)Csrf Cross-site request forgery protection\n3)Compress Gzip compression middleware\n4)BasicAuth basic http authentication\n5)BodyParser extensible request body parser\n6)Json application/json parser\n7)Urlencoded application/x-www-form-urlencoded parser\n8)Multipart multipart/form-data parser\n9)CookieParser cookie parser\n10)Session session management support with bundled MemoryStore\n11)SessionSession cookie-based session support\n12)MethodOverride faux HTTP method support\n13)ResponseTime calculates response-time and exposes via X-Response-Time\n14)StaticCache memory cache layer for the static() middleware\n15)Static streaming static file server supporting Range and more\n16)Directory directory listing middleware\n17)Vhost virtual host sub-domain mapping middleware\n18)Favicon efficient favicon server (with default icon)\n19)Limit limit the bytesize of request bodies\n20)Query automatic querystring parser, populating req.query\n21)ErrorHandler flexible error handler\n\nInternals:\n\n1)Server prototype\n2)Connect utilities\n3)Node monkey patches\n\n","type":"DESCRIPTION"}],"versions":[{"documentsid":0,"version":"1.7.2","url":"/modules/tech-nodejs-webservice/files/mod_connect_1.7.2/1.7.2/mod_connect_1.7.2-1.7.2.zip","modulesid":0}]},{"id":"mod_express_0.5.0","name":"Express","core":true,"required":true,"docs":[{"content":"Express is used for high performance and for high class web development for Node.js.    ","type":"HELP_TEXT"},{"content":"Express is used for high performance and for high class web development for Node.js.  Creating A Server: To create an instance of the express.HTTPServer, simply invoke the createServer() method. With our instance app we can then define routes based on the HTTP verbs, in this example app.get().  Creating An HTTPS Server: To initialize a express.HTTPSServer we do the same as above, however we pass an options object, accepting key, cert and the others mentioned in node’s https documentation.  Configuration: Express supports arbitrary environments, such as production and development. Developers can use the configure() method to setup needs required by the current environment. When configure() is called without an environment name it will be run in every environment prior to the environment specific callback.In the example below we only dumpExceptions, and respond with exception stack traces in development mode, however for both environments we utilize methodOverride and bodyParser. Note the use of app.router, which can (optionally) be used to mount the application routes, otherwise the first call to app.get(), app.post(), etc will mount the routes.  Settings: Express supports the following settings out of the box:  1)Basepath Application base path used for res.redirect() and transparently handling mounted apps. 2)Views Root views directory defaulting to CWD/views 3)View engine Default view engine name for views rendered without extensions 4)View options An object specifying global view options 5)View cache Enable view caching (enabled in production) 6)Case sensitive routes Enable case-sensitive routing 7)Strict routing When enabled trailing slashes are no longer ignored 8)Jsonp callback Enable res.send() / res.json() transparent jsonp support  Routing: Express utilizes the HTTP verbs to provide a meaningful, expressive routing API. For example we may want to render a user’s account for the path /user/12, this can be done by defining the route below. The values associated to the named placeholders are available as req.params.  Passing Route Control: We may pass control to the next matching route, by calling the third argument, the next() function. When a match cannot be made, control is passed back to Connect, and middleware continue to be invoked in the order that they are added via use(). The same is true for several routes which have the same path defined, they will simply be executed in order until one does not call next() and decides to respond.","type":"DESCRIPTION"}],"versions":[{"documentsid":0,"version":"0.5.0","url":"/modules/tech-nodejs-webservice/files/mod_express_0.5.0/0.5.0/mod_express_0.5.0-0.5.0.zip","modulesid":0}]},{"id":"mod_mime_1.2.4","name":"mime","core":true,"required":true,"docs":[{"content":"Mime is mainly used for mapping API.\n\n","type":"HELP_TEXT"},{"content":"Mime is mainly used for mapping API.\n\n","type":"DESCRIPTION"}],"versions":[{"documentsid":0,"version":"1.2.4","url":"/modules/tech-nodejs-webservice/files/mod_mime_1.2.4/1.2.4/mod_mime_1.2.4-1.2.4.zip","modulesid":0}]},{"id":"mod_nodeunit_0.6.4","name":"nodeunit","core":true,"required":true,"docs":[{"content":"Easy unit testing for node.js and the browser","type":"HELP_TEXT"},{"content":"Easy unit testing for node.js and the browser","type":"DESCRIPTION"}],"versions":[{"documentsid":0,"version":"0.6.4","url":"/modules/tech-nodejs-webservice/files/mod_nodeunit_0.6.4/0.6.4/mod_nodeunit_0.6.4-0.6.4.zip","modulesid":0}]},{"id":"mod_qs_0.3.1","name":"qs","core":true,"required":true,"docs":[{"content":"Query string parser for node supporting nesting.This module provides utilities for dealing with query strings. ","type":"HELP_TEXT"},{"content":"Query string parser for node supporting nesting.This module provides utilities for dealing with query strings.Query string parser for node supporting nesting.This module provides utilities for dealing with query strings.  \n\nMethods:\n1)querystring.stringify(obj, sep\u003d\u0027\u0026\u0027, eq\u003d\u0027\u003d\u0027).\n2)Serialize an object to a query string. Optionally override the default separator and assignment characters.\n3)querystring.parse(str, sep\u003d\u0027\u0026\u0027, eq\u003d\u0027\u003d\u0027).\n4)Deserialize a query string to an object. Optionally override the default separator and assignment characters. querystring.escape.\n5)The escape function used by querystring.stringify, provided so that it could be overridden if necessary. querystring.unescape.\n6)The unescape function used by querystring.parse, provided so that it could be overridden if necessary.\n","type":"DESCRIPTION"}],"versions":[{"documentsid":0,"version":"0.3.1","url":"/modules/tech-nodejs-webservice/files/mod_qs_0.3.1/0.3.1/mod_qs_0.3.1-0.3.1.zip","modulesid":0}]},{"id":"mod_xml2js_0.1.14","name":"xml2js","core":true,"required":true,"docs":[{"content":"Simple XML to JavaScript object converter.","type":"HELP_TEXT"},{"content":"Simple XML to JavaScript object converter.","type":"DESCRIPTION"}],"versions":[{"documentsid":0,"version":"0.1.14","url":"/modules/tech-nodejs-webservice/files/mod_xml2js_0.1.14/0.1.14/mod_xml2js_0.1.14-0.1.14.zip","modulesid":0}]}],"servers":[{"id":1,"name":"Apache Tomcat","versions":["7.0.x"],"description":"Apache Tomcat Server"}],"databases":[{"id":1,"name":"MySQL","versions":["5.5.1"],"description":"My SQL DB"}],"emailSupported":false,"versions":["6.14"]},"application":"apptype-web-services","pilotProjectName":"","projectCode":""}